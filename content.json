{"meta":{"title":"AXEHCO'S BLOG","subtitle":"","description":"","author":"Axehco","url":"https://Axehco.github.io","root":"/"},"pages":[{"title":"","date":"2020-11-14T06:02:47.088Z","updated":"2020-11-14T06:02:47.088Z","comments":true,"path":"404.html","permalink":"https://axehco.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"技术大佬","date":"2020-11-18T07:35:17.028Z","updated":"2020-11-18T07:35:17.028Z","comments":false,"path":"friends/index.html","permalink":"https://axehco.github.io/friends/index.html","excerpt":"博主还未添加任何友链哟，去看看其他吧~","text":"博主还未添加任何友链哟，去看看其他吧~"},{"title":"所有分类","date":"2020-11-14T15:39:25.493Z","updated":"2020-11-14T15:39:25.493Z","comments":true,"path":"categories/index.html","permalink":"https://axehco.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-14T05:44:31.206Z","updated":"2020-11-14T05:44:31.206Z","comments":true,"path":"tags/index.html","permalink":"https://axehco.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-14T05:45:32.376Z","updated":"2020-11-14T05:45:32.376Z","comments":true,"path":"mylist/index.html","permalink":"https://axehco.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"加一","slug":"加一","date":"2020-11-26T04:09:43.000Z","updated":"2020-11-26T04:14:13.714Z","comments":false,"path":"2020/11/26/加一/","link":"","permalink":"https://axehco.github.io/2020/11/26/%E5%8A%A0%E4%B8%80/","excerpt":"摘要","text":"题目描述题目传送门： 加一https://leetcode-cn.com/problems/plus-one 给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1: 123输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字 123。 示例 2: 123输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字 4321。 题解投机取巧将digits各个元素转化为整数，整数自加1，转化为字符串列表再将字符串列表转化为整型列表，返回即可 AC代码 12345678910111213class Solution: def plusOne(self, digits: List[int]) -&gt; List[int]: digits.reverse() ans = 0 cnt = 1 for i in digits: ans += i * cnt cnt *= 10 result = list(str(ans + 1)) out = [] for i in result: out.append(int(i)) return out 正常解法从后往前依次判断末尾是否为9，如果为9加1后要置为0，继续判断前一位，判断到digits的第一位都是9时，在digits第一位插入1结束；不为9加1后直接返回即可。 AC代码 1234567891011class Solution: def plusOne(self, digits: List[int]) -&gt; List[int]: l = len(digits) for i in range(0, l): digits[l - i - 1] = (digits[l - i - 1] + 1) % 10 if digits[l - i - 1] != 0: return digits else: continue digits.insert(0, 1) return digits","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/categories/LeetCode/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/tags/LeetCode/"},{"name":"Python","slug":"Python","permalink":"https://axehco.github.io/tags/Python/"},{"name":"数组","slug":"数组","permalink":"https://axehco.github.io/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"两数之和","slug":"两数之和","date":"2020-11-15T07:54:11.000Z","updated":"2020-11-18T04:12:32.219Z","comments":false,"path":"2020/11/15/两数之和/","link":"","permalink":"https://axehco.github.io/2020/11/15/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"哈希表的应用","text":"问题描述题目传送门： 两数之和https://leetcode-cn.com/problems/two-sum/ 给定一个整数数组nums和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。 实例： 1234给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9所以返回 [0, 1] 题解暴力求解 遍历数组，判断target - num是否也在list中，如果满足，还需判断target - num的下标不能是num的下标，但此方法效率较长。 AC代码： 123456class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: nums = list(nums) for index, num in enumerate(nums): if target - num in nums and nums.index(target - num) != index: return [index, nums.index(target - num)] 打表实现 哈希表：简单来说就是存有键值对[key, value]的一种数据结构，其查找速度是最快的。因此为了提高查找的效率，可以通过字典来模拟哈希查询，只用一次循环即可解决。 AC代码： 12345678class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: dic = dict() for index, num in enumerate(nums): temp = dic.get(target - num) if temp is not None: return [temp, index] dic[num] = index","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/categories/LeetCode/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/tags/LeetCode/"},{"name":"Python","slug":"Python","permalink":"https://axehco.github.io/tags/Python/"},{"name":"哈希表","slug":"哈希表","permalink":"https://axehco.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"数组","slug":"数组","permalink":"https://axehco.github.io/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"丢失的数字","slug":"丢失的数字","date":"2020-11-14T08:55:45.000Z","updated":"2020-11-18T05:09:02.119Z","comments":false,"path":"2020/11/14/丢失的数字/","link":"","permalink":"https://axehco.github.io/2020/11/14/%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/","excerpt":"巧用数学思维","text":"问题描述题目传送门 丢失的数字https://leetcode-cn.com/problems/missing-number/ 给定一个包含 [0, n] 中 n 个数的数组 nums ，找出 [0, n] 这个范围内没有出现在数组中的那个数。 进阶： 你能否实现线性时间复杂度、仅使用额外常数空间的算法解决此问题? 示例 1： 123输入：nums &#x3D; [3,0,1]输出：2解释：n &#x3D; 3，因为有 3 个数字，所以所有的数字都在范围 [0,3] 内。2 是丢失的数字，因为它没有出现在 nums 中。 示例 2： 123输入：nums &#x3D; [0,1]输出：2解释：n &#x3D; 2，因为有 2 个数字，所以所有的数字都在范围 [0,2] 内。2 是丢失的数字，因为它没有出现在 nums 中。 示例 3： 123输入：nums &#x3D; [9,6,4,2,3,5,7,0,1]输出：8解释：n &#x3D; 9，因为有 9 个数字，所以所有的数字都在范围 [0,9] 内。8 是丢失的数字，因为它没有出现在 nums 中。 示例 4： 123输入：nums &#x3D; [0]输出：1解释：n &#x3D; 1，因为有 1 个数字，所以所有的数字都在范围 [0,1] 内。1 是丢失的数字，因为它没有出现在 nums 中。 提示： n == nums.length 1 &lt;= n &lt;= 104 0 &lt;= nums[i] &lt;= n nums 中的所有数字都 独一无二 题解数学解法先求出0到n这n+1个数的和再求出nums中所有数的和两者相减，得到的即为丢失的数字 AC代码： 1234567class Solution: def missingNumber(self, nums: List[int]) -&gt; int: sum = int((1 + len(nums)) * len(nums) / 2) sum1 = 0 for i in nums: sum1 += i return sum - sum1 哈希表实现哈希表实现产生n+1个bool型的数遍历一遍，改变其值再输出即可 AC代码： 12345678class Solution: def missingNumber(self, nums: List[int]) -&gt; int: Hash = [True for i in range(len(nums) + 1)] for i in nums: Hash[i] = False for i, j in enumerate(Hash): if j: return i","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/categories/LeetCode/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/tags/LeetCode/"},{"name":"Python","slug":"Python","permalink":"https://axehco.github.io/tags/Python/"},{"name":"数学","slug":"数学","permalink":"https://axehco.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"哈希表","slug":"哈希表","permalink":"https://axehco.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]}],"categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/categories/LeetCode/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://axehco.github.io/tags/LeetCode/"},{"name":"Python","slug":"Python","permalink":"https://axehco.github.io/tags/Python/"},{"name":"数组","slug":"数组","permalink":"https://axehco.github.io/tags/%E6%95%B0%E7%BB%84/"},{"name":"哈希表","slug":"哈希表","permalink":"https://axehco.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"数学","slug":"数学","permalink":"https://axehco.github.io/tags/%E6%95%B0%E5%AD%A6/"}]}